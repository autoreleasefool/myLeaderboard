{"version":3,"sources":["api/LeaderboardAPI.ts","components/Refresh.tsx","lib/Freshness.ts","components/PlayerView.tsx","dashboard/limbo/Limbo.tsx","dashboard/shadowRealm/ShadowRealm.tsx","components/Version.tsx","dashboard/Standings.tsx","dashboard/GameDashboard.tsx","App.tsx","index.tsx"],"names":["LeaderboardAPI","Object","classCallCheck","this","instance","fetch","concat","baseURL","response","json","gameList","playerList","id","standings","since","toISOString","updates","hasUpdates","RefreshView","props","_this","possibleConstructorReturn","getPrototypeOf","call","refreshInterval","undefined","startTime","Date","state","errorMessage","_startRefreshLoop","_this2","react_default","a","createElement","index_es","title","onDismiss","status","_this3","setState","window","clearInterval","setInterval","_refreshLoop","refreshTime","getInstance","location","reload","_context","t0","React","Component","freshness","record","seconds","getTime","lastPlayed","daysSinceLastPlayed","Math","floor","max","min","staleLimit","isBanished","player","PlayerView","fresh","banished","limbo","src","avatar","alt","displayName","className","style","opacity","Limbo","limboing","_this$props","players","filter","playerRecord","records","length","map","components_PlayerView","key","username","ShadowRealm","_identifyBanishedPlayers","prevProps","majorVersion","minorVersion","patchVersion","Version","Standings","banishedPlayers","Set","_parseStandings","game","visiblePlayers","has","name","columnContentTypes","_","headings","rows","components_Version","toConsumableArray","recordCells","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","opponent","value","push","_formatRecord","wins","losses","ties","err","return","overallRecord","_this$props2","overall","classNames","isWorst","isBest","join","Dashboard","refresh","_fetchStandings","_this$state","playersWithGames","_playerRecord$overall","src_dashboard_Standings","forceRefresh","dashboard_limbo_Limbo","dashboard_shadowRealm_ShadowRealm","gameStandings","App","games","_fetchData","Refresh","dashboard_GameDashboard","sort","first","second","toLowerCase","localeCompare","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0832af8a.chunk.js","sourcesContent":["import { Game, GameStandings, Player } from '../lib/types';\n\nclass LeaderboardAPI {\n    public static getInstance(): LeaderboardAPI {\n        if (LeaderboardAPI.instance == null) {\n            LeaderboardAPI.instance = new LeaderboardAPI();\n        }\n\n        return LeaderboardAPI.instance;\n    }\n\n    private static instance: LeaderboardAPI;\n    private static baseURL = 'http://myleaderboard.josephroque.dev';\n\n    private constructor() {}\n\n    public async games(): Promise<Array<Game>> {\n        const response = await fetch(`${LeaderboardAPI.baseURL}/games/list`);\n        const gameList = await response.json();\n        return gameList;\n    }\n\n    public async players(): Promise<Array<Player>> {\n        const response = await fetch(`${LeaderboardAPI.baseURL}/players/list?includeAvatars=true`);\n        const playerList = await response.json();\n        return playerList;\n    }\n\n    public async gameStandings(id: number): Promise<GameStandings> {\n        const response = await fetch(`${LeaderboardAPI.baseURL}/games/standings/${id}`);\n        const standings = await response.json();\n        return standings;\n    }\n\n    public async hasUpdates(since: Date): Promise<boolean> {\n        const response = await fetch(`${LeaderboardAPI.baseURL}/misc/hasUpdates?since=${since.toISOString()}`);\n        const updates = await response.json();\n        return updates.hasUpdates;\n    }\n}\n\nexport default LeaderboardAPI;\n","import { Banner, Card, Page } from '@shopify/polaris';\nimport React from 'react';\nimport LeaderboardAPI from '../api/LeaderboardAPI';\n\ninterface Props {\n    refreshTime: number;\n}\n\ninterface State {\n    errorMessage: string | undefined;\n}\n\nclass RefreshView extends React.Component<Props, State> {\n    private refreshInterval: number | undefined = undefined;\n    private startTime: Date;\n\n    constructor(props: Props) {\n        super(props);\n        this.startTime = new Date();\n        this.state = {\n            errorMessage: undefined,\n        };\n    }\n\n    public componentDidMount() {\n        this._startRefreshLoop();\n    }\n\n    public render() {\n        const { errorMessage } = this.state;\n        if (errorMessage == null) {\n            return null;\n        }\n\n        return (\n            <Page title=''>\n                <Card>\n                    <Banner title={'Failed to refresh'} onDismiss={() => this._startRefreshLoop()} status={'critical'}>\n                        <p>{errorMessage}</p>\n                    </Banner>\n                </Card>\n            </Page>\n        );\n    }\n\n    private _startRefreshLoop() {\n        if (this.state.errorMessage != null) {\n            this.setState({ errorMessage: undefined });\n        }\n\n        if (this.refreshInterval != null) {\n            window.clearInterval(this.refreshInterval);\n        }\n\n        this.refreshInterval = window.setInterval(() => this._refreshLoop(), this.props.refreshTime);\n    }\n\n    private async _refreshLoop() {\n        try {\n            const anyUpdates = await LeaderboardAPI.getInstance().hasUpdates(this.startTime);\n            if (anyUpdates) {\n                window.location.reload();\n            }\n        } catch (error) {\n            this.setState({ errorMessage: `${error}` });\n        }\n    }\n}\n\nexport default RefreshView;\n","import { PlayerRecord } from './types';\n\nexport function freshness(record: PlayerRecord): number {\n    const today = new Date();\n    const seconds = (today.getTime() - new Date(record.lastPlayed).getTime()) / 1000;\n    const daysSinceLastPlayed = Math.floor(seconds / 86400);\n    const veryFreshLimit = 7;\n    const staleLimit = 21;\n\n    if (daysSinceLastPlayed <= veryFreshLimit) {\n        // Played in last X days? Very fresh.\n        return 1;\n    } else if (daysSinceLastPlayed >= staleLimit) {\n        // Haven't played in Y days? Stale.\n        return 0;\n    } else {\n        // Otherwise, freshness is 0-1, based on number of days\n        const maxFreshnessRange = staleLimit - veryFreshLimit;\n        return Math.max(0, Math.min((maxFreshnessRange - (daysSinceLastPlayed - veryFreshLimit)) / maxFreshnessRange, 1));\n    }\n}\n\nexport function isBanished(player: PlayerRecord): boolean {\n    return freshness(player) === 0;\n}\n","import React from 'react';\nimport { freshness } from '../lib/Freshness';\nimport { Player, PlayerRecord } from '../lib/types';\nimport './PlayerView.css';\n\ninterface Props {\n    player: Player;\n    record?: PlayerRecord;\n    banished?: boolean;\n    limbo?: boolean;\n}\n\nfunction PlayerView(props: Props) {\n    const { player, record, banished, limbo } = props;\n    let fresh: number;\n    if (banished || limbo) {\n        fresh = 1;\n    } else if (record != null) {\n        fresh = freshness(record);\n    } else {\n        fresh = 1;\n    }\n\n    return <img\n        src={player.avatar}\n        alt={player.displayName}\n        className='avatar'\n        style={{ opacity: fresh }}\n        />;\n}\n\nexport default PlayerView;\n","import { Page } from '@shopify/polaris';\nimport React from 'react';\nimport PlayerView from '../../components/PlayerView';\nimport { freshness } from '../../lib/Freshness';\nimport { GameStandings, Player } from '../../lib/types';\nimport './Limbo.css';\n\ninterface Props {\n    players: Array<Player>;\n    standings: GameStandings;\n    forceRefresh: boolean;\n}\n\ninterface State {\n    limboing: Array<Player>;\n}\n\nclass Limbo extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            limboing: [],\n        };\n    }\n\n    public componentDidMount() {\n        const { players, standings } = this.props;\n\n        const limboing = players.filter(player => {\n            const playerRecord = standings.records[player.id];\n            if (playerRecord == null) {\n                return false;\n            }\n\n            const fresh = freshness(playerRecord);\n            return fresh > 0 && fresh < 0.2;\n        });\n\n        this.setState({ limboing });\n    }\n\n    public render() {\n        const { limboing } = this.state;\n        if (limboing.length === 0) {\n            return null;\n        }\n\n        return (\n            <Page title={'Limbo'}>\n                <div className={'limbo'}>\n                    {this.state.limboing.map(player => <PlayerView key={player.username} player={player} limbo={true} />)}\n                </div>\n            </Page>\n        );\n    }\n}\n\nexport default Limbo;\n","import { Page } from '@shopify/polaris';\nimport React from 'react';\nimport PlayerView from '../../components/PlayerView';\nimport { isBanished } from '../../lib/Freshness';\nimport { GameStandings, Player } from '../../lib/types';\nimport './ShadowRealm.css';\n\ninterface Props {\n    players: Array<Player>;\n    standings: GameStandings;\n    forceRefresh: boolean;\n}\n\ninterface State {\n    banished: Array<Player>;\n}\n\nclass ShadowRealm extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            banished: [],\n        };\n    }\n\n    public componentDidMount() {\n        this._identifyBanishedPlayers();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (this.props.players !== prevProps.players) {\n            this._identifyBanishedPlayers();\n        }\n    }\n\n    public render() {\n        const { banished } = this.state;\n        if (banished.length === 0) {\n            return null;\n        }\n\n        return (\n            <Page title={'Shadow Realm'}>\n                <div className={'shadowRealm'}>\n                    {this.state.banished.map(player => <PlayerView key={player.username} player={player} banished={true} />)}\n                </div>\n            </Page>\n        );\n    }\n\n    private _identifyBanishedPlayers() {\n        const { players, standings } = this.props;\n        const banished = players.filter(player => {\n            const playerRecord = standings.records[player.id];\n            return playerRecord == null ? false : isBanished(playerRecord);\n        });\n        this.setState({ banished });\n    }\n}\n\nexport default ShadowRealm;\n","import React from 'react';\n\nconst majorVersion = 5;\nconst minorVersion = 0;\nconst patchVersion = 0;\n\nfunction Version() {\n    return <p>{`v${majorVersion}.${minorVersion}.${patchVersion}`}</p>;\n}\n\nexport default Version;\n","import { Card, ColumnContentType, DataTable, Page } from '@shopify/polaris';\nimport React, { ReactNode } from 'react';\nimport PlayerView from '../components/PlayerView';\nimport Version from '../components/Version';\nimport { isBanished } from '../lib/Freshness';\nimport { Game, GameStandings, Player, Record } from '../lib/types';\nimport './Standings.css';\n\ninterface Props {\n    game: Game;\n    standings: GameStandings;\n    players: Array<Player>;\n    forceRefresh: boolean;\n}\n\ninterface State {\n    banishedPlayers: Set<number>;\n}\n\nclass Standings extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            banishedPlayers: new Set(),\n        };\n    }\n\n    public componentDidMount() {\n        this._parseStandings();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (this.props.standings !== prevProps.standings) {\n            this._parseStandings();\n        }\n    }\n\n    public render() {\n        const { game, players, standings } = this.props;\n\n        const visiblePlayers = players.filter(player => this.state.banishedPlayers.has(player.id) === false);\n\n        return (\n            <Page title={game.name}>\n                <Card>\n                    <DataTable\n                        columnContentTypes={visiblePlayers.map(_ => 'text' as ColumnContentType)}\n                        headings={[]}\n                        rows={[\n                            [<Version />, 'Total', ...visiblePlayers.map(player => <PlayerView player={player} record={standings.records[player.id]} />)],\n                            ...visiblePlayers.map(player => {\n                                const recordCells: Array<ReactNode> = [];\n                                for (const opponent of visiblePlayers) {\n                                    if (opponent.username === player.username) {\n                                        recordCells.push('—');\n                                        continue;\n                                    }\n\n                                    const record = standings.records[player.id].record[opponent.id];\n                                    if (record == null) {\n                                        recordCells.push(this._formatRecord({ wins: 0, losses: 0, ties: 0 }, false));\n                                        continue;\n                                    }\n\n                                    recordCells.push(this._formatRecord(record, false));\n                                }\n\n                                return [\n                                    <PlayerView key={player.username} player={player} record={standings.records[player.id]} />,\n                                    this._formatRecord(standings.records[player.id].overallRecord, true),\n                                    ...recordCells,\n                                ];\n                            }),\n                        ]}\n                    />\n                </Card>\n            </Page>\n        );\n    }\n\n    private _parseStandings() {\n        const { players, standings } = this.props;\n        const banishedPlayers = this._identifyBanishedPlayers(standings, players);\n        this.setState({ banishedPlayers });\n    }\n\n    private _identifyBanishedPlayers(standings: GameStandings, players: Array<Player>): Set<number> {\n        return new Set(players.filter(player => isBanished(standings.records[player.id])).map(player => player.id));\n    }\n\n    private _formatRecord(record: Record, overall: boolean): ReactNode {\n        const classNames: Array<string> = ['record'];\n\n        if (overall) {\n            classNames.push('record--overall');\n        }\n\n        if (record.isWorst) {\n            classNames.push('record--worst');\n        }\n\n        if (record.isBest) {\n            classNames.push('record--best');\n        }\n\n        return (\n            <div className={classNames.join(' ')}>\n                <span className='record--value record--wins'>{record.wins}</span>\n                {'-'}\n                <span className='record--value record--losses'>{record.losses}</span>\n                {record.ties > 0\n                    ? (\n                        <span>\n                            {'-'}\n                            <span className='record--value record--ties'>{record.ties}</span>\n                        </span>\n                    )\n                    : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default Standings;\n","import React from 'react';\nimport LeaderboardAPI from '../api/LeaderboardAPI';\nimport { Game, GameStandings, Player } from '../lib/types';\nimport './GameDashboard.css';\nimport Limbo from './limbo/Limbo';\nimport ShadowRealm from './shadowRealm/ShadowRealm';\nimport Standings from './Standings';\n\ninterface Props {\n    game: Game;\n    players: Array<Player>;\n}\n\ninterface State {\n    refresh: boolean;\n    standings: GameStandings | undefined;\n}\n\nconst softRefreshTime = 60 * 60 * 1000;\n\nclass Dashboard extends React.Component<Props, State> {\n    private refreshInterval: number | undefined = undefined;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            refresh: false,\n            standings: undefined,\n        };\n    }\n\n    public componentDidMount() {\n        this._fetchStandings();\n        this._startRefreshLoop();\n    }\n\n    public render() {\n        const { refresh, standings } = this.state;\n        const { game, players } = this.props;\n\n        if (standings == null || players.length === 0) {\n            return null;\n        }\n\n        const playersWithGames = players.filter(player => {\n            const playerRecord = standings.records[player.id];\n            if (playerRecord == null) {\n                return false;\n            }\n\n            const { wins, losses, ties } = playerRecord.overallRecord;\n            return (wins > 0 || losses > 0 || ties > 0);\n        });\n\n        return (\n            <div className={'game-dashboard'}>\n                <Standings key={game.id} game={game} standings={standings} players={playersWithGames} forceRefresh={refresh} />\n                <Limbo standings={standings} players={playersWithGames} forceRefresh={refresh} />\n                <ShadowRealm standings={standings} players={playersWithGames} forceRefresh={refresh} />\n            </div>\n        );\n    }\n\n    private async _fetchStandings() {\n        const standings = await LeaderboardAPI.getInstance().gameStandings(this.props.game.id);\n\n        this.setState({\n            standings,\n        });\n    }\n\n    private _startRefreshLoop() {\n        if (this.refreshInterval != null) {\n            window.clearInterval(this.refreshInterval);\n        }\n\n        this.refreshInterval = window.setInterval(() => this._refreshLoop(), softRefreshTime);\n    }\n\n    private async _refreshLoop() {\n        this.setState({ refresh: !this.state.refresh });\n    }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport LeaderboardAPI from './api/LeaderboardAPI';\nimport RefreshView from './components/Refresh';\nimport GameDashboard from './dashboard/GameDashboard';\nimport { Game, Player } from './lib/types';\n\ninterface State {\n    games: Array<Game>;\n    players: Array<Player>;\n}\n\nclass App extends React.Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            games: [],\n            players: [],\n        };\n    }\n\n    public componentDidMount() {\n        this._fetchData();\n    }\n\n    public render() {\n        const { games, players } = this.state;\n\n        return (\n            <div>\n                <RefreshView refreshTime={20 * 1000} />\n                {games.map(game => {\n                    return <GameDashboard key={game.id} game={game} players={players} />;\n                })}\n            </div>\n        );\n    }\n\n    private async _fetchData() {\n        const games = await LeaderboardAPI.getInstance().games();\n        const players = await LeaderboardAPI.getInstance().players();\n        players.sort((first, second) => first.username.toLowerCase().localeCompare(second.username.toLowerCase()));\n\n        this.setState({ games, players });\n    }\n}\n\nexport default App;\n","import { AppProvider } from '@shopify/polaris';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <AppProvider>\n        <App />\n    </AppProvider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}