{"version":3,"sources":["api/LeaderboardAPI.ts","components/Refresh.tsx","lib/Freshness.ts","components/PlayerView.tsx","dashboard/limbo/Limbo.tsx","dashboard/shadowRealm/ShadowRealm.tsx","components/Version.tsx","dashboard/Standings.tsx","dashboard/GameDashboard.tsx","App.tsx","index.tsx"],"names":["LeaderboardAPI","instance","fetch","baseURL","response","json","gameList","playerList","id","standings","since","toISOString","updates","hasUpdates","RefreshView","props","refreshInterval","undefined","startTime","Date","state","errorMessage","this","_startRefreshLoop","title","onDismiss","status","setState","window","clearInterval","setInterval","_refreshLoop","refreshTime","getInstance","location","reload","React","Component","freshness","record","seconds","getTime","lastPlayed","daysSinceLastPlayed","Math","floor","max","min","staleLimit","isBanished","player","PlayerView","fresh","banished","limbo","src","avatar","alt","displayName","className","style","opacity","Limbo","limboing","players","filter","playerRecord","records","length","map","key","username","ShadowRealm","_identifyBanishedPlayers","prevProps","Version","Standings","banishedPlayers","Set","_parseStandings","game","visiblePlayers","has","name","columnContentTypes","_","headings","rows","recordCells","opponent","push","_formatRecord","wins","losses","ties","overallRecord","overall","classNames","isWorst","isBest","join","Dashboard","playersWithGames","refresh","_fetchStandings","forceRefresh","gameStandings","App","games","_fetchData","Refresh","sort","first","second","toLowerCase","localeCompare","ReactDOM","render","i18n","document","getElementById"],"mappings":"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","file":"static/js/main.207c3c3e.chunk.js","sourcesContent":["import { Game, GameRecord, Player } from '../lib/types';\n\nclass LeaderboardAPI {\n    public static getInstance(): LeaderboardAPI {\n        if (LeaderboardAPI.instance == null) {\n            LeaderboardAPI.instance = new LeaderboardAPI();\n        }\n\n        return LeaderboardAPI.instance;\n    }\n\n    private static instance: LeaderboardAPI;\n    private static baseURL = 'https://myleaderboard.josephroque.dev';\n\n    private constructor() {\n        // Does nothing\n    }\n\n    public async games(): Promise<Game[]> {\n        const response = await fetch(`${LeaderboardAPI.baseURL}/games/list`);\n        const gameList = await response.json();\n        return gameList;\n    }\n\n    public async players(): Promise<Player[]> {\n        const response = await fetch(`${LeaderboardAPI.baseURL}/players/list?includeAvatars=true`);\n        const playerList = await response.json();\n        return playerList;\n    }\n\n    public async gameStandings(id: number): Promise<GameRecord> {\n        const response = await fetch(`${LeaderboardAPI.baseURL}/games/standings/${id}`);\n        const standings = await response.json();\n        return standings;\n    }\n\n    public async hasUpdates(since: Date): Promise<boolean> {\n        const response = await fetch(`${LeaderboardAPI.baseURL}/misc/hasUpdates?since=${since.toISOString()}`);\n        const updates = await response.json();\n        return updates.hasUpdates;\n    }\n}\n\nexport default LeaderboardAPI;\n","import { Banner, Card, Page } from '@shopify/polaris';\nimport React from 'react';\nimport LeaderboardAPI from '../api/LeaderboardAPI';\n\ninterface Props {\n    refreshTime: number;\n}\n\ninterface State {\n    errorMessage: string | undefined;\n}\n\nclass RefreshView extends React.Component<Props, State> {\n    private refreshInterval: number | undefined = undefined;\n    private startTime: Date;\n\n    constructor(props: Props) {\n        super(props);\n        this.startTime = new Date();\n        this.state = {\n            errorMessage: undefined,\n        };\n    }\n\n    public componentDidMount(): void {\n        this._startRefreshLoop();\n    }\n\n    public render(): React.ReactNode {\n        const { errorMessage } = this.state;\n        if (errorMessage == null) {\n            return null;\n        }\n\n        return (\n            <Page title=''>\n                <Card>\n                    <Banner title={'Failed to refresh'} onDismiss={(): void => this._startRefreshLoop()} status={'critical'}>\n                        <p>{errorMessage}</p>\n                    </Banner>\n                </Card>\n            </Page>\n        );\n    }\n\n    private _startRefreshLoop(): void {\n        if (this.state.errorMessage != null) {\n            this.setState({ errorMessage: undefined });\n        }\n\n        if (this.refreshInterval != null) {\n            window.clearInterval(this.refreshInterval);\n        }\n\n        this.refreshInterval = window.setInterval(() => this._refreshLoop(), this.props.refreshTime);\n    }\n\n    private async _refreshLoop(): Promise<void> {\n        try {\n            const anyUpdates = await LeaderboardAPI.getInstance().hasUpdates(this.startTime);\n            if (anyUpdates) {\n                window.location.reload();\n            }\n        } catch (error) {\n            this.setState({ errorMessage: `${error}` });\n        }\n    }\n}\n\nexport default RefreshView;\n","import { PlayerRecord } from './types';\n\nexport function freshness(record: PlayerRecord): number {\n    const today = new Date();\n    const seconds = (today.getTime() - new Date(record.lastPlayed ? record.lastPlayed : \"\").getTime()) / 1000;\n    const daysSinceLastPlayed = Math.floor(seconds / 86400);\n    const veryFreshLimit = 7;\n    const staleLimit = 21;\n\n    if (daysSinceLastPlayed <= veryFreshLimit) {\n        // Played in last X days? Very fresh.\n        return 1;\n    } else if (daysSinceLastPlayed >= staleLimit) {\n        // Haven't played in Y days? Stale.\n        return 0;\n    } else {\n        // Otherwise, freshness is 0-1, based on number of days\n        const maxFreshnessRange = staleLimit - veryFreshLimit;\n        return Math.max(0, Math.min((maxFreshnessRange - (daysSinceLastPlayed - veryFreshLimit)) / maxFreshnessRange, 1));\n    }\n}\n\nexport function isBanished(player: PlayerRecord): boolean {\n    return freshness(player) === 0;\n}\n","import React from 'react';\nimport { freshness } from '../lib/Freshness';\nimport { Player, PlayerRecord } from '../lib/types';\nimport './PlayerView.css';\n\ninterface Props {\n    player: Player;\n    record?: PlayerRecord;\n    banished?: boolean;\n    limbo?: boolean;\n}\n\nfunction PlayerView(props: Props): React.ReactElement {\n    const { player, record, banished, limbo } = props;\n    let fresh: number;\n    if (banished || limbo) {\n        fresh = 1;\n    } else if (record != null) {\n        fresh = freshness(record);\n    } else {\n        fresh = 1;\n    }\n\n    return <img\n        src={player.avatar}\n        alt={player.displayName}\n        className='avatar'\n        style={{ opacity: fresh }}\n    />;\n}\n\nexport default PlayerView;\n","import { Page } from '@shopify/polaris';\nimport React from 'react';\nimport PlayerView from '../../components/PlayerView';\nimport { freshness } from '../../lib/Freshness';\nimport { GameRecord, Player } from '../../lib/types';\nimport './Limbo.css';\n\ninterface Props {\n    players: Player[];\n    standings: GameRecord;\n    forceRefresh: boolean;\n}\n\ninterface State {\n    limboing: Player[];\n}\n\nclass Limbo extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            limboing: [],\n        };\n    }\n\n    public componentDidMount(): void {\n        const { players, standings } = this.props;\n\n        const limboing = players.filter(player => {\n            const playerRecord = standings.records[player.id];\n            if (playerRecord == null) {\n                return false;\n            }\n\n            const fresh = freshness(playerRecord);\n            return fresh > 0 && fresh < 0.2;\n        });\n\n        this.setState({ limboing });\n    }\n\n    public render(): React.ReactNode {\n        const { limboing } = this.state;\n        if (limboing.length === 0) {\n            return null;\n        }\n\n        return (\n            <Page title={'Limbo'}>\n                <div className={'limbo'}>\n                    {this.state.limboing.map(player => <PlayerView key={player.username} player={player} limbo={true} />)}\n                </div>\n            </Page>\n        );\n    }\n}\n\nexport default Limbo;\n","import { Page } from '@shopify/polaris';\nimport React from 'react';\nimport PlayerView from '../../components/PlayerView';\nimport { isBanished } from '../../lib/Freshness';\nimport { GameRecord, Player } from '../../lib/types';\nimport './ShadowRealm.css';\n\ninterface Props {\n    players: Player[];\n    standings: GameRecord;\n    forceRefresh: boolean;\n}\n\ninterface State {\n    banished: Player[];\n}\n\nclass ShadowRealm extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            banished: [],\n        };\n    }\n\n    public componentDidMount(): void {\n        this._identifyBanishedPlayers();\n    }\n\n    public componentDidUpdate(prevProps: Props): void {\n        if (this.props.players !== prevProps.players) {\n            this._identifyBanishedPlayers();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { banished } = this.state;\n        if (banished.length === 0) {\n            return null;\n        }\n\n        return (\n            <Page title={'Shadow Realm'}>\n                <div className={'shadowRealm'}>\n                    {this.state.banished.map(player => <PlayerView key={player.username} player={player} banished={true} />)}\n                </div>\n            </Page>\n        );\n    }\n\n    private _identifyBanishedPlayers(): void {\n        const { players, standings } = this.props;\n        const banished = players.filter(player => {\n            const playerRecord = standings.records[player.id];\n            return playerRecord == null ? false : isBanished(playerRecord);\n        });\n        this.setState({ banished });\n    }\n}\n\nexport default ShadowRealm;\n","import React from 'react';\n\nconst majorVersion = 5;\nconst minorVersion = 0;\nconst patchVersion = 5;\n\nfunction Version(): React.ReactElement {\n    return <p>{`v${majorVersion}.${minorVersion}.${patchVersion}`}</p>;\n}\n\nexport default Version;\n","import { Card, ColumnContentType, DataTable, Page } from '@shopify/polaris';\nimport React, { ReactNode } from 'react';\nimport PlayerView from '../components/PlayerView';\nimport Version from '../components/Version';\nimport { isBanished } from '../lib/Freshness';\nimport { Game, GameRecord, Player, Record } from '../lib/types';\nimport './Standings.css';\n\ninterface Props {\n    game: Game;\n    standings: GameRecord;\n    players: Player[];\n    forceRefresh: boolean;\n}\n\ninterface State {\n    banishedPlayers: Set<number>;\n}\n\nclass Standings extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            banishedPlayers: new Set(),\n        };\n    }\n\n    public componentDidMount(): void {\n        this._parseStandings();\n    }\n\n    public componentDidUpdate(prevProps: Props): void {\n        if (this.props.standings !== prevProps.standings) {\n            this._parseStandings();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { game, players, standings } = this.props;\n\n        const visiblePlayers = players.filter(player => this.state.banishedPlayers.has(player.id) === false);\n\n        return (\n            <Page title={game.name}>\n                <Card>\n                    <DataTable\n                        columnContentTypes={visiblePlayers.map(_ => 'text' as ColumnContentType)}\n                        headings={[]}\n                        rows={[\n                            [<Version key=\"version\" />, 'Total', ...visiblePlayers.map(player => <PlayerView key={`header-${player.id}`} player={player} record={standings.records[player.id]} />)],\n                            ...visiblePlayers.map(player => {\n                                const recordCells: Array<ReactNode> = [];\n                                for (const opponent of visiblePlayers) {\n                                    if (opponent.username === player.username) {\n                                        recordCells.push('—');\n                                        continue;\n                                    }\n\n                                    const record = standings.records[player.id].records[opponent.id];\n                                    if (record == null) {\n                                        recordCells.push(this._formatRecord({ wins: 0, losses: 0, ties: 0 }, false));\n                                        continue;\n                                    }\n\n                                    recordCells.push(this._formatRecord(record, false));\n                                }\n\n                                return [\n                                    <PlayerView key={player.username} player={player} record={standings.records[player.id]} />,\n                                    this._formatRecord(standings.records[player.id].overallRecord, true),\n                                    ...recordCells,\n                                ];\n                            }),\n                        ]}\n                    />\n                </Card>\n            </Page>\n        );\n    }\n\n    private _parseStandings(): void {\n        const { players, standings } = this.props;\n        const banishedPlayers = this._identifyBanishedPlayers(standings, players);\n        this.setState({ banishedPlayers });\n    }\n\n    private _identifyBanishedPlayers(standings: GameRecord, players: Player[]): Set<number> {\n        return new Set(players.filter(player => isBanished(standings.records[player.id])).map(player => player.id));\n    }\n\n    private _formatRecord(record: Record, overall: boolean): ReactNode {\n        const classNames: Array<string> = ['record'];\n\n        if (overall) {\n            classNames.push('record--overall');\n        }\n\n        if (record.isWorst) {\n            classNames.push('record--worst');\n        }\n\n        if (record.isBest) {\n            classNames.push('record--best');\n        }\n\n        return (\n            <div className={classNames.join(' ')}>\n                <span className='record--value record--wins'>{record.wins}</span>\n                {'-'}\n                <span className='record--value record--losses'>{record.losses}</span>\n                {record.ties > 0\n                    ? (\n                        <span>\n                            {'-'}\n                            <span className='record--value record--ties'>{record.ties}</span>\n                        </span>\n                    )\n                    : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default Standings;\n","import React from 'react';\nimport { Page } from '@shopify/polaris';\nimport LeaderboardAPI from '../api/LeaderboardAPI';\nimport { Game, GameRecord, Player } from '../lib/types';\nimport './GameDashboard.css';\nimport Limbo from './limbo/Limbo';\nimport ShadowRealm from './shadowRealm/ShadowRealm';\nimport Standings from './Standings';\nimport { isBanished } from '../lib/Freshness';\n\ninterface Props {\n    game: Game;\n    players: Player[];\n}\n\ninterface State {\n    banishedPlayers: Set<number>;\n    playersWithGames: Player[];\n    refresh: boolean;\n    standings: GameRecord | undefined;\n}\n\nconst softRefreshTime = 60 * 60 * 1000;\n\nclass Dashboard extends React.Component<Props, State> {\n    private refreshInterval: number | undefined = undefined;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            banishedPlayers: new Set(),\n            playersWithGames: [],\n            refresh: false,\n            standings: undefined,\n        };\n    }\n\n    public componentDidMount(): void {\n        this._fetchStandings();\n        this._startRefreshLoop();\n    }\n\n    public render(): React.ReactNode {\n        const { refresh, standings, playersWithGames } = this.state;\n        const { game } = this.props;\n\n        if (standings == null || playersWithGames.length === 0) {\n            return null;\n        }\n\n        const visiblePlayers = playersWithGames.filter(player => this.state.banishedPlayers.has(player.id) === false);\n\n        if (playersWithGames.length > 0 && visiblePlayers.length === 0) {\n            return (\n                <Page title={game.name}>\n                    <h1 className={'no-recent-plays'}>No recent plays...</h1>\n                </Page>\n            );\n        }\n\n        return (\n            <div className={'game-dashboard'}>\n                <Standings key={game.id} game={game} standings={standings} players={playersWithGames} forceRefresh={refresh} />\n                <Limbo standings={standings} players={playersWithGames} forceRefresh={refresh} />\n                <ShadowRealm standings={standings} players={playersWithGames} forceRefresh={refresh} />\n            </div>\n        );\n    }\n\n    private async _fetchStandings(): Promise<void> {\n        const { players } = this.props;\n        const standings = await LeaderboardAPI.getInstance().gameStandings(this.props.game.id);\n\n        const playersWithGames = players.filter(player => {\n            const playerRecord = standings.records[player.id];\n            if (playerRecord == null) {\n                return false;\n            }\n\n            const { wins, losses, ties } = playerRecord.overallRecord;\n            return (wins > 0 || losses > 0 || ties > 0);\n        });\n\n        const banishedPlayers = this._identifyBanishedPlayers(standings, playersWithGames);\n\n        this.setState({\n            banishedPlayers,\n            playersWithGames,\n            standings,\n        });\n    }\n\n    private _identifyBanishedPlayers(standings: GameRecord, players: Player[]): Set<number> {\n        return new Set(players.filter(player => isBanished(standings.records[player.id])).map(player => player.id));\n    }\n\n    private _startRefreshLoop(): void {\n        if (this.refreshInterval != null) {\n            window.clearInterval(this.refreshInterval);\n        }\n\n        this.refreshInterval = window.setInterval(() => this._refreshLoop(), softRefreshTime);\n    }\n\n    private async _refreshLoop(): Promise<void> {\n        this.setState({ refresh: !this.state.refresh });\n    }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport LeaderboardAPI from './api/LeaderboardAPI';\nimport RefreshView from './components/Refresh';\nimport GameDashboard from './dashboard/GameDashboard';\nimport { Game, Player } from './lib/types';\n\ninterface State {\n    games: Game[];\n    players: Player[];\n}\n\nclass App extends React.Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            games: [],\n            players: [],\n        };\n    }\n\n    public componentDidMount(): void {\n        this._fetchData();\n    }\n\n    public render(): React.ReactNode {\n        const { games, players } = this.state;\n\n        return (\n            <div>\n                <RefreshView refreshTime={20 * 1000} />\n                {games.map(game => {\n                    return <GameDashboard key={game.id} game={game} players={players} />;\n                })}\n            </div>\n        );\n    }\n\n    private async _fetchData(): Promise<void> {\n        const games = await LeaderboardAPI.getInstance().games();\n        const players = await LeaderboardAPI.getInstance().players();\n        players.sort((first, second) => first.username.toLowerCase().localeCompare(second.username.toLowerCase()));\n\n        this.setState({ games, players });\n    }\n}\n\nexport default App;\n","import { AppProvider } from '@shopify/polaris';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <AppProvider i18n={{}}>\n        <App />\n    </AppProvider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}