{"version":3,"sources":["lib/Game.ts","lib/Octo.ts","common/Base64.ts","components/Refresh.tsx","dashboard/shadowRealm/ShadowRealm.tsx","components/PlayerView.tsx","dashboard/limbo/Limbo.tsx","components/Version.tsx","dashboard/Standings.tsx","dashboard/GameDashboard.tsx","App.tsx","index.tsx","common/Params.ts"],"names":["allGames","_allGames","apply","this","arguments","_callee","contents","games","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","content","regenerator_default","a","wrap","_context","prev","next","Octo","getInstance","dir","sent","undefined","Symbol","iterator","done","value","type","name","endsWith","push","split","t0","return","finish","abrupt","stop","token","Object","classCallCheck","octo","repo","userCache","Map","dirCache","contentsCache","blobCache","Octokat","repos","instance","branch","clear","forGame","playerUsernames","Set","basicPlayers","game","playersForGame","gamePlayers","_iterator2","_iteratorNormalCompletion2","_step2","gamePlayer","has","username","add","promises","_i","_basicPlayers","length","basicPlayer","user","Promise","all","users","players","i","avatar","avatarUrl","displayName","concat","standings","JSON","parse","charAt","substr","get","fetch","set","path","read","ref","dirContents","items","filename","encoded","atob","since","commits","sha","toISOString","commitInfo","commitItems","_iterator3","_iteratorNormalCompletion3","_step3","commit","writeables","writeable","raw","btoa","message","RefreshView","props","_this","possibleConstructorReturn","getPrototypeOf","call","refreshInterval","startTime","Date","state","errorMessage","_startRefreshLoop","_this2","react_default","createElement","index_es","title","onDismiss","status","_this3","setState","window","clearInterval","setInterval","_refreshLoop","refreshTime","location","reload","React","Component","freshness","player","seconds","getTime","lastPlayed","daysSinceLastPlayed","Math","floor","min","isBanished","ShadowRealm","banished","_identifyBanishedPlayers","prevProps","className","map","components_PlayerView","key","filter","PlayerView","fresh","limbo","src","alt","style","opacity","Limbo","limboing","majorVersion","minorVersion","patchVersion","Version","Standings","banishedPlayers","_parseStandings","_this$props","namesToPlayers","_mapPlayerNamesToPlayers","columnContentTypes","_","headings","rows","components_Version","toConsumableArray","recordCells","opponent","_formatRecord","records","err","total","overallRecords","headToHeadRecords","_didIteratorError2","_iteratorError2","playerOverallRecord","wins","losses","ties","_Object$keys","keys","opponentUsername","_standings$records$pl","invisiblePlayers","_identifyInvisiblePlayers","_highlightRecords","Array","from","record","worstRecords","winRate","Infinity","bestRecords","_didIteratorError3","_iteratorError3","totalGames","playerRecordForHighlight","_updateHighlightedRecords","worstVsRecords","bestVsRecords","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","vsRecord","vsTotalGames","vsRecordForHighlight","_markBestAndWorstRecords","playerTotals","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","playerRecord","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","isBest","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","isWorst","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","overall","classNames","join","Dashboard","_fetchStandings","_this$state","playersWithGames","src_dashboard_Standings","dashboard_limbo_Limbo","dashboard_shadowRealm_ShadowRealm","genericPlayers","genericPlayer","standingsPlayer","sort","first","second","toLowerCase","localeCompare","App","then","Refresh","dashboard_GameDashboard","setToken","URLSearchParams","search","getParam","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1f1ff179.chunk.js","sourcesContent":["import Octo from './Octo';\n\nexport async function allGames(): Promise<Array<string>> {\n    const contents = await Octo.getInstance().dir('data');\n\n    const games: Array<string> = [];\n    for (const content of contents) {\n        if (content.type === 'file' && content.name.endsWith('.json')) {\n            games.push(content.name.split('.')[0]);\n        }\n    }\n    return games;\n}\n","// tslint:disable\n\n// @ts-ignore: Common module in api/dashboard\nimport * as Octokat from 'octokat';\n// @ts-ignore: Common module in api/dashboard\nimport { base64decode, base64encode } from '../common/Base64';\nimport { allGames } from './Game';\nimport { BasicPlayer, BasicGamePlayer, GameStandings, GitHubUser, GenericPlayer } from './types';\n\ninterface Blob {\n    content: string;\n    path: string;\n    sha: string;\n}\n\ninterface Author {\n    name: string;\n    email: string;\n    date: string;\n}\n\ninterface Commit {\n    author: Author;\n    committer: Author;\n    message: string;\n}\n\ninterface CommitItem {\n    sha: string;\n    commit: Commit;\n}\n\ninterface Content {\n    type: string;\n    name: string;\n}\n\nexport interface Writeable {\n    path: string;\n    sha?: string;\n    content: string;\n    message?: string;\n}\n\nclass Octo {\n    public static setToken(token: string | undefined) {\n        Octo.token = token;\n        Octo.instance = undefined;\n    }\n\n    public static setBranch(branch: string) {\n        Octo.branch = branch;\n    }\n\n    public static getInstance(): Octo {\n        if (Octo.instance == null) {\n            Octo.instance = new Octo(Octo.token);\n        }\n\n        return Octo.instance;\n    }\n\n    private static instance: Octo | undefined;\n    private static branch: string = 'master';\n    private static token: string | undefined;\n\n    private octo: any;\n    private repo: any;\n    private userCache: Map<string, GitHubUser> = new Map(); // TODO: store promises while waiting for response\n    private dirCache: Map<string, Array<Content>> = new Map(); // TODO: store promises while waiting for response\n    private contentsCache: Map<string, string> = new Map(); // TODO: store promises while waiting for response\n    private blobCache: Map<string, Blob> = new Map(); // TODO: store promises while waiting for response\n\n    private constructor(token: string | undefined) {\n        // @ts-ignore Octokat isn't playing nice with TS, so ignore the error that it's not a constructor.\n        this.octo = Octokat.default({ token });\n        this.repo = this.octo.repos('josephroquedev', 'myLeaderboard');\n    }\n\n    public clearCache() {\n        this.userCache.clear();\n        this.contentsCache.clear();\n        this.blobCache.clear();\n    }\n\n    // Users\n\n    public async players(forGame: string | undefined = undefined): Promise<Array<GenericPlayer>> {\n        const playerUsernames: Set<string> = new Set();\n        const basicPlayers: Array<BasicPlayer> = [];\n\n        let games: Array<string>;\n        if (forGame == null) {\n            games = await allGames();\n        } else {\n            games = [forGame];\n        }\n\n        for (const game of games) {\n            const gamePlayers = await this.playersForGame(game);\n            for (const gamePlayer of gamePlayers) {\n                if (playerUsernames.has(gamePlayer.username) === false) {\n                    playerUsernames.add(gamePlayer.username);\n                    basicPlayers.push(gamePlayer);\n                }\n            }\n        }\n\n        const promises: Array<Promise<GitHubUser>> = [];\n        for (const basicPlayer of basicPlayers) {\n            promises.push(this.user(basicPlayer.username));\n        }\n\n        const users = await Promise.all(promises);\n\n        const players: Array<GenericPlayer> = [];\n        for (let i = 0; i < basicPlayers.length; i++) {\n            players.push({\n                avatar: users[i].avatarUrl,\n                displayName: basicPlayers[i].displayName,\n                username: basicPlayers[i].username,\n            });\n        }\n        return players;\n    }\n\n    private async playersForGame(game: string): Promise<Array<BasicGamePlayer>> {\n        const contents = await this.contents(`data/${game}.json`);\n        const standings: GameStandings = JSON.parse(contents);\n        return standings.players;\n    }\n\n    public async user(name: string): Promise<GitHubUser> {\n        if (name.charAt(0) === '@') {\n            name = name.substr(1);\n        }\n\n        if (this.userCache.has(name)) {\n            return this.userCache.get(name)!;\n        } else {\n            const user = await this.octo.users(name).fetch();\n            this.userCache.set(name, user);\n            return user;\n        }\n    }\n\n    // Contents\n\n    public async dir(path: string): Promise<Array<Content>> {\n        let contents: Array<Content> | undefined = this.dirCache.get(path);\n        if (contents == null) {\n            const dirContents = await this.repo.contents(path).read({ ref: Octo.branch });\n            this.dirCache.set(path, dirContents.items);\n            contents = dirContents.items;\n        }\n\n        return contents!;\n    }\n\n    public async contents(filename: string): Promise<string> {\n        if (this.contentsCache.has(filename)) {\n            return this.contentsCache.get(filename)!;\n        } else {\n            const contents = await this.repo.contents(filename).read({ ref: Octo.branch });\n            this.contentsCache.set(filename, contents);\n            return contents;\n        }\n    }\n\n    public async blob(filename: string): Promise<Blob> {\n        if (this.blobCache.has(filename)) {\n            return this.blobCache.get(filename)!;\n        } else {\n            const contents = await this.repo.contents(filename).fetch();\n            contents.content = base64decode(contents.content);\n            this.blobCache.set(filename, contents);\n            return contents;\n        }\n    }\n\n    // Repo\n\n    public async commits(since?: Date): Promise<Array<Commit>> {\n        const commitInfo = (since == null)\n            ? await this.repo.commits.fetch({ sha: Octo.branch })\n            : await this.repo.commits.fetch({ since: since.toISOString(), sha: Octo.branch });\n\n        const commitItems: Array<CommitItem> = commitInfo.items;\n        const commits: Array<Commit> = [];\n        for (const commit of commitItems) {\n            commits.push(commit.commit);\n        }\n        return commits;\n    }\n\n    public async write(writeables: Array<Writeable>): Promise<void> {\n        for (const writeable of writeables) {\n            await this.repo.contents(writeable.path)\n                .add({\n                    content: base64encode(writeable.content),\n                    message: (writeable.message != null) ? writeable.message : `Updating ${writeable.path}`,\n                    sha: writeable.sha,\n                });\n        }\n    }\n}\n\nexport default Octo;\n","export function base64decode(encoded: string): string {\n    return atob(encoded);\n}\n\nexport function base64encode(raw: string): string {\n    return btoa(raw);\n}\n","import { Banner, Card, Page } from '@shopify/polaris';\nimport React from 'react';\nimport Octo from '../lib/Octo';\n\ninterface Props {\n    refreshTime: number;\n}\n\ninterface State {\n    errorMessage: string | undefined;\n}\n\nclass RefreshView extends React.Component<Props, State> {\n    private refreshInterval: number | undefined = undefined;\n    private startTime: Date;\n\n    constructor(props: Props) {\n        super(props);\n        this.startTime = new Date();\n        this.state = {\n            errorMessage: undefined,\n        };\n    }\n\n    public componentDidMount() {\n        this._startRefreshLoop();\n    }\n\n    public render() {\n        const { errorMessage } = this.state;\n        if (errorMessage == null) {\n            return null;\n        }\n\n        return (\n            <Page title=''>\n                <Card>\n                    <Banner title={'Failed to refresh'} onDismiss={() => this._startRefreshLoop()} status={'critical'}>\n                        <p>{errorMessage}</p>\n                    </Banner>\n                </Card>\n            </Page>\n        );\n    }\n\n    private _startRefreshLoop() {\n        if (this.state.errorMessage != null) {\n            this.setState({ errorMessage: undefined });\n        }\n\n        if (this.refreshInterval != null) {\n            window.clearInterval(this.refreshInterval);\n        }\n\n        this.refreshInterval = window.setInterval(() => this._refreshLoop(), this.props.refreshTime);\n    }\n\n    private async _refreshLoop() {\n        try {\n            const commits = await Octo.getInstance().commits(this.startTime);\n            if (commits.length > 0) {\n                window.location.reload();\n            }\n        } catch (error) {\n            this.setState({ errorMessage: `${error}` });\n\n        }\n    }\n}\n\nexport default RefreshView;\n","import { Page } from '@shopify/polaris';\nimport React from 'react';\nimport PlayerView from '../../components/PlayerView';\nimport { Player } from '../../lib/types';\nimport './ShadowRealm.css';\n\ninterface Props {\n    players: Array<Player>;\n}\n\ninterface State {\n    banished: Array<Player>;\n}\n\nclass ShadowRealm extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            banished: [],\n        };\n    }\n\n    public componentDidMount() {\n        this._identifyBanishedPlayers();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (this.props.players !== prevProps.players) {\n            this._identifyBanishedPlayers();\n        }\n    }\n\n    public render() {\n        const { banished } = this.state;\n        if (banished.length === 0) {\n            return null;\n        }\n\n        return (\n            <Page title={'Shadow Realm'}>\n                <div className={'shadowRealm'}>\n                    {this.state.banished.map(player => <PlayerView key={player.username} player={player} banished={true} />)}\n                </div>\n            </Page>\n        );\n    }\n\n    private _identifyBanishedPlayers() {\n        const banished = this.props.players.filter(player => isBanished(player));\n        this.setState({ banished });\n    }\n}\n\nexport function freshness(player: Player): number {\n    const today = new Date();\n    const seconds = (today.getTime() - player.lastPlayed.getTime()) / 1000;\n    const daysSinceLastPlayed = Math.floor(seconds / 86400);\n\n    if (daysSinceLastPlayed < 7) {\n        // Played in the last week? Very fresh.\n        return 1;\n    } else if (daysSinceLastPlayed > 30) {\n        // Haven't played in a month? Stale.\n        return 0;\n    } else {\n        // Otherwise, freshness is 0-1, based on number of days\n        return Math.min((23 - (daysSinceLastPlayed - 7)) / 23, 1);\n\n    }\n}\n\nexport function isBanished(player: Player): boolean {\n    return freshness(player) === 0;\n}\n\nexport default ShadowRealm;\n","import React from 'react';\nimport { freshness } from '../dashboard/shadowRealm/ShadowRealm';\nimport { Player } from '../lib/types';\nimport './PlayerView.css';\n\ninterface Props {\n    player: Player;\n    banished?: boolean;\n    limbo?: boolean;\n}\n\nfunction PlayerView(props: Props) {\n    const { player } = props;\n    let fresh: number;\n    if (props.banished || props.limbo) {\n        fresh = 1;\n    } else {\n        fresh = freshness(player);\n    }\n\n    return <img\n        src={player.avatar}\n        alt={player.displayName}\n        className='avatar'\n        style={{ opacity: fresh }}\n        />;\n}\n\nexport default PlayerView;\n","import { Page } from '@shopify/polaris';\nimport React from 'react';\nimport PlayerView from '../../components/PlayerView';\nimport { Player } from '../../lib/types';\nimport { freshness } from '../shadowRealm/ShadowRealm';\nimport './Limbo.css';\n\ninterface Props {\n    players: Array<Player>;\n}\n\ninterface State {\n    limboing: Array<Player>;\n}\n\nclass Limbo extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            limboing: [],\n        };\n    }\n\n    public componentDidMount() {\n        const limboing = this.props.players.filter(player => {\n            const fresh = freshness(player);\n            return fresh > 0 && fresh < 0.2;\n        });\n\n        this.setState({ limboing });\n    }\n\n    public render() {\n        const { limboing } = this.state;\n        if (limboing.length === 0) {\n            return null;\n        }\n\n        return (\n            <Page title={'Limbo'}>\n                <div className={'limbo'}>\n                    {this.state.limboing.map(player => <PlayerView key={player.username} player={player} limbo={true} />)}\n                </div>\n            </Page>\n        );\n    }\n}\n\nexport default Limbo;\n","import React from 'react';\n\nconst majorVersion = 5;\nconst minorVersion = 0;\nconst patchVersion = 0;\n\nfunction Version() {\n    return <p>{`v${majorVersion}.${minorVersion}.${patchVersion}`}</p>;\n}\n\nexport default Version;\n","import { Card, ColumnContentType, DataTable, Page } from '@shopify/polaris';\nimport React, { ReactNode } from 'react';\nimport PlayerView from '../components/PlayerView';\nimport Version from '../components/Version';\nimport { GameStandings, Player, Record } from '../lib/types';\nimport { isBanished } from './shadowRealm/ShadowRealm';\nimport './Standings.css';\n\ninterface RecordHighlight {\n    player: string | undefined;\n    winRate: number;\n    losses: number;\n    wins: number;\n}\n\ninterface GamePlayer {\n    username: string;\n    total: Record;\n    records: Map<string, Record>;\n}\n\ninterface Props {\n    game: string;\n    standings: GameStandings;\n    players: Array<Player>;\n}\n\ninterface State {\n    banishedPlayers: Set<string>;\n    gamePlayers: Array<GamePlayer>;\n}\n\nclass Standings extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            banishedPlayers: new Set(),\n            gamePlayers: [],\n        };\n    }\n\n    public componentDidMount() {\n        this._parseStandings();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (this.props.standings !== prevProps.standings) {\n            this._parseStandings();\n        }\n    }\n\n    public render() {\n        const { game, players } = this.props;\n        const { gamePlayers } = this.state;\n        const namesToPlayers = this._mapPlayerNamesToPlayers(players);\n\n        return (\n            <Page title={game}>\n                <Card>\n                    <DataTable\n                        columnContentTypes={gamePlayers.map(_ => 'text' as ColumnContentType)}\n                        headings={[]}\n                        rows={[\n                            [<Version />, 'Total', ...gamePlayers.map(player => <PlayerView player={namesToPlayers.get(player.username)!} />)],\n                            ...gamePlayers.map(player => {\n                                const recordCells: Array<ReactNode> = [];\n                                for (const opponent of gamePlayers) {\n                                    if (opponent.username === player.username) {\n                                        recordCells.push('—');\n                                        continue;\n                                    }\n\n                                    recordCells.push(this._formatRecord(player.records.get(opponent.username)!, false));\n                                }\n\n                                return [\n                                    <PlayerView key={player.username} player={namesToPlayers.get(player.username)!} />,\n                                    this._formatRecord(player.total, true),\n                                    ...recordCells,\n                                ];\n                            }),\n                        ]}\n                    />\n                </Card>\n            </Page>\n        );\n    }\n\n    private _parseStandings() {\n        const { standings } = this.props;\n        const overallRecords: Map<string, Record> = new Map();\n        const headToHeadRecords: Map<string, Map<string, Record>> = new Map();\n\n        for (const player of standings.players) {\n            const playerOverallRecord: Record = { wins: 0, losses: 0, ties: 0 };\n\n            for (const opponentUsername of Object.keys(standings.records[player.username])) {\n                const { wins, losses, ties } = standings.records[player.username][opponentUsername];\n                if (headToHeadRecords.has(player.username) === false) {\n                    headToHeadRecords.set(player.username, new Map());\n                }\n\n                const playerRecords = headToHeadRecords.get(player.username)!;\n                playerRecords.set(opponentUsername, { wins, losses, ties });\n\n                playerOverallRecord.wins += wins;\n                playerOverallRecord.losses += losses;\n                playerOverallRecord.ties += ties;\n            }\n\n            overallRecords.set(player.username, playerOverallRecord);\n        }\n\n        const invisiblePlayers = this._identifyInvisiblePlayers(overallRecords);\n        const banishedPlayers = this._identifyBanishedPlayers(this.props.players);\n\n        const gamePlayers: Array<GamePlayer> = this.props.players.filter(player => {\n            return invisiblePlayers.has(player.username) === false && banishedPlayers.has(player.username) === false;\n        }).map(player => {\n            return {\n                records: headToHeadRecords.get(player.username)!,\n                total: overallRecords.get(player.username)!,\n                username: player.username,\n            };\n        });\n\n        this._highlightRecords(gamePlayers);\n\n        this.setState({\n            banishedPlayers,\n            gamePlayers,\n        });\n    }\n\n    private _identifyInvisiblePlayers(records: Map<string, Record>): Set<string> {\n        return new Set(Array.from(records.keys()).filter(player => {\n            const record = records.get(player)!;\n            return record.wins + record.losses + record.ties === 0;\n        }));\n    }\n\n    private _identifyBanishedPlayers(players: Array<Player>): Set<string> {\n        return new Set(players.filter(player => isBanished(player)).map(player => player.username));\n    }\n\n    private _highlightRecords(players: Array<GamePlayer>) {\n        const worstRecords: Array<RecordHighlight> = [{ player: undefined, winRate: Infinity, losses: 0, wins: 0 }];\n        const bestRecords: Array<RecordHighlight> = [{ player: undefined, winRate: -Infinity, losses: 0, wins: 0 }];\n\n        for (const player of players) {\n            const totalGames = player.total.wins + player.total.losses + player.total.ties;\n            const winRate = player.total.wins / totalGames;\n\n            const playerRecordForHighlight = { player: player.username, winRate, losses: player.total.losses, wins: player.total.wins };\n            this._updateHighlightedRecords(playerRecordForHighlight, bestRecords, worstRecords);\n\n            const worstVsRecords: Array<RecordHighlight> = [{ player: undefined, winRate: Infinity, losses: 0, wins: 0 }];\n            const bestVsRecords: Array<RecordHighlight> = [{ player: undefined, winRate: -Infinity, losses: 0, wins: 0 }];\n            for (const opponent of player.records.keys()) {\n                const vsRecord = player.records.get(opponent)!;\n                const vsTotalGames = vsRecord.wins + vsRecord.losses + vsRecord.ties;\n                const vsWinRate = vsRecord.wins / vsTotalGames;\n\n                const vsRecordForHighlight = { player: opponent, winRate: vsWinRate, losses: vsRecord.losses, wins: vsRecord.wins };\n                this._updateHighlightedRecords(vsRecordForHighlight, bestVsRecords, worstVsRecords);\n            }\n\n            this._markBestAndWorstRecords(player.records, bestVsRecords, worstVsRecords);\n        }\n\n        const playerTotals: Map<string, Record> = new Map();\n        for (const player of players) {\n            playerTotals.set(player.username, player.total);\n        }\n        this._markBestAndWorstRecords(playerTotals, bestRecords, worstRecords);\n    }\n\n    private _updateHighlightedRecords(record: RecordHighlight, bestRecords: Array<RecordHighlight>, worstRecords: Array<RecordHighlight>) {\n        if (record.winRate > bestRecords[0].winRate) {\n            bestRecords.length = 0;\n            bestRecords.push(record);\n        } else if (record.winRate === bestRecords[0].winRate) {\n            if (record.wins > bestRecords[0].wins) {\n                bestRecords.length = 0;\n                bestRecords.push(record);\n            } else if (record.wins === bestRecords[0].wins) {\n                bestRecords.push(record);\n            }\n        }\n\n        if (record.winRate < worstRecords[0].winRate) {\n            worstRecords.length = 0;\n            worstRecords.push(record);\n        } else if (record.winRate === worstRecords[0].winRate) {\n            if (record.losses > worstRecords[0].losses) {\n                worstRecords.length = 0;\n                worstRecords.push(record);\n            } else if (record.losses === bestRecords[0].losses) {\n                worstRecords.push(record);\n            }\n        }\n    }\n\n    private _markBestAndWorstRecords(records: Map<string, Record>, bestRecords: Array<RecordHighlight>, worstRecords: Array<RecordHighlight>) {\n        for (const player of records.keys()) {\n            const playerRecord = records.get(player)!;\n\n            for (const best of bestRecords) {\n                if (best.player === player) {\n                    playerRecord.isBest = true;\n                    break;\n                }\n            }\n\n            for (const worst of worstRecords) {\n                if (worst.player === player) {\n                    playerRecord.isWorst = true;\n                    break;\n                }\n            }\n        }\n    }\n\n    private _mapPlayerNamesToPlayers(players: Array<Player>): Map<string, Player> {\n        const map: Map<string, Player> = new Map();\n        for (const player of players) {\n            map.set(player.username, player);\n        }\n        return map;\n    }\n\n    private _formatRecord(record: Record, overall: boolean): ReactNode {\n        const classNames: Array<string> = ['record'];\n\n        if (overall) {\n            classNames.push('record--overall');\n        }\n\n        if (record.isWorst) {\n            classNames.push('record--worst');\n        }\n\n        if (record.isBest) {\n            classNames.push('record--best');\n        }\n\n        return (\n            <div className={classNames.join(' ')}>\n                <span className='record--value record--wins'>{record.wins}</span>\n                {'-'}\n                <span className='record--value record--losses'>{record.losses}</span>\n                {record.ties > 0\n                    ? (\n                        <span>\n                            {'-'}\n                            <span className='record--value record--ties'>{record.ties}</span>\n                        </span>\n                    )\n                    : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default Standings;\n","import React from 'react';\nimport Octo from '../lib/Octo';\nimport { BasicGamePlayer, GameStandings, Player } from '../lib/types';\nimport './GameDashboard.css';\nimport Limbo from './limbo/Limbo';\nimport ShadowRealm from './shadowRealm/ShadowRealm';\nimport Standings from './Standings';\n\ninterface Props {\n    game: string;\n}\n\ninterface State {\n    standings: GameStandings | undefined;\n    players: Array<Player>;\n}\n\nclass Dashboard extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            players: [],\n            standings: undefined,\n        };\n    }\n\n    public componentDidMount() {\n        this._fetchStandings();\n    }\n\n    public render() {\n        const { players, standings } = this.state;\n        const { game } = this.props;\n\n        if (standings == null || players.length === 0) {\n            return null;\n        }\n\n        const playersWithGames = players.filter(player => {\n            for (const opponent of Object.keys(standings.records[player.username])) {\n                const { wins, losses, ties } = standings.records[player.username][opponent];\n                if (wins > 0 || losses > 0 || ties > 0) {\n                    return true;\n                }\n            }\n\n            return false;\n        });\n\n        return (\n            <div className={'game-dashboard'}>\n                <Standings key={game} game={game} standings={standings} players={players} />\n                <Limbo players={playersWithGames} />\n                <ShadowRealm players={playersWithGames} />\n            </div>\n        );\n    }\n\n    private async _fetchStandings() {\n        const contents = await Octo.getInstance().contents(`data/${this.props.game}.json`);\n        const standings: GameStandings = JSON.parse(contents);\n        const genericPlayers = await Octo.getInstance().players();\n        const players: Array<Player> = [];\n\n        for (const genericPlayer of genericPlayers) {\n            let standingsPlayer: BasicGamePlayer | undefined;\n            for (const player of standings.players) {\n                if (player.username === genericPlayer.username) {\n                    standingsPlayer = player;\n                }\n            }\n\n            if (standingsPlayer == null) {\n                continue;\n            }\n\n            players.push({\n                avatar: genericPlayer.avatar,\n                displayName: genericPlayer.displayName,\n                lastPlayed: new Date(standingsPlayer.lastPlayed),\n                username: genericPlayer.username,\n            });\n        }\n\n        standings.players.sort((first, second) => first.username.toLowerCase().localeCompare(second.username.toLowerCase()));\n        players.sort((first, second) => first.username.toLowerCase().localeCompare(second.username.toLowerCase()));\n\n        this.setState({\n            players,\n            standings,\n        });\n    }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport RefreshView from './components/Refresh';\nimport GameDashboard from './dashboard/GameDashboard';\nimport { allGames } from './lib/Game';\n\ninterface State {\n    games: Array<string>;\n}\n\nclass App extends React.Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            games: [],\n        };\n    }\n\n    public componentDidMount() {\n        allGames().then(games => {\n            this.setState({ games });\n        });\n    }\n\n    public render() {\n        return (\n            <div>\n                <RefreshView refreshTime={20 * 1000} />\n                {this.state.games.map(game => {\n                    return <GameDashboard key={game} game={game} />;\n                })}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { AppProvider } from '@shopify/polaris';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { getParam } from './common/Params';\nimport './index.css';\nimport Octo from './lib/Octo';\n\nOcto.setToken(getParam('token'));\n\nReactDOM.render(\n    <AppProvider>\n        <App />\n    </AppProvider>,\n    document.getElementById('root'),\n);\n","export function getParam(key: string): string | undefined {\n    if (window.URLSearchParams == null) {\n        return undefined;\n    }\n\n    const urlParams = new window.URLSearchParams(window.location.search);\n    const value = urlParams.get(key);\n    return (value != null) ? value : undefined;\n}\n"],"sourceRoot":""}